import * as fs from 'fs';
import * as path from 'path';
import createBuilder from '../schema-builder';

export class MigrationBuilder {
  steps: Array<any>;

  constructor() {
    this.steps = [];
  }

  // Method to add a delete component migration
  addDeleteComponent(uid: string): void {
    this.steps.push({
      action: 'deleteComponent',
      uid,
    });
  }

  async writeFiles(outputDir?: string) {
    try {
      // Locate the Strapi project directory
      const strapiDir = strapi.dirs.app?.root || process.cwd();

      // Set the default migrations directory if outputDir is not specified
      const migrationsDir = outputDir || path.join(strapiDir, 'database', 'migrations');

      // Ensure the migrations directory exists
      if (!fs.existsSync(migrationsDir)) {
        fs.mkdirSync(migrationsDir, { recursive: true });
      }

      // Write the migration file
      const timestamp = new Date().toISOString().replace(/[-:TZ.]/g, ''); // Format timestamp
      const fileName = `${timestamp}_migration.js`; // Timestamp as prefix
      const filePath = path.join(migrationsDir, fileName);

      // Generate the content for the up migration
      const upContent = this.steps
        .map((step) => {
          if (step.action === 'deleteComponent') {
            return this.generateDeleteComponentKnex(step.uid);
          }
          // Handle additional actions here if needed
          return '';
        })
        .filter(Boolean)
        .join('\n');

      // Complete file content
      const fileContent = `// Migration file generated by Strapi at ${new Date().toISOString()}
  
  module.exports = {
    async up(knex) {
      ${upContent}
    },
    async down(knex) {
      // Add rollback logic if needed
    },
  };
  `;

      fs.writeFileSync(filePath, fileContent, 'utf-8');

      console.log(`Migration file written to: ${filePath}`);
    } catch (error) {
      console.error('Error writing migration files:', error);
    }
  }

  private generateDeleteComponentKnex(uid: string): string {
    const builder = createBuilder();

    const models = [...builder.contentTypes.entries(), ...builder.components.entries()];

    const deleteStatements: string[] = [];

    for (const [modelUid] of models) {
      const metadata = strapi.db.metadata.get(modelUid);

      const matchingAttributes = Object.values(metadata.attributes).filter(
        (attr: any) => attr.target === uid && attr.joinTable?.name
      );

      for (const attr of matchingAttributes) {
        if (!('joinTable' in attr && attr.joinTable && attr.joinTable.name)) {
          continue;
        }

        // Generate SQL for deleting entries from the join table
        const tableName = attr.joinTable.name;
        deleteStatements.push(
          `    await knex('${tableName}').where('component_type', '${uid}').del();`
        );
      }
    }

    return deleteStatements.join('\n');
  }
}
